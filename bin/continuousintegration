PLATFORMS=(
    macOS
    iOS
    watchOS
    tvOS
)

DESTINATIONS=(
    "platform=macOS"
    "platform=iOS Simulator,name=iPhone XR"
    "platform=iOS Simulator,name=iPhone XR" # watchOS currently doesn't provide unit tests, so they are run on iOS
    "platform=tvOS Simulator,name=Apple TV"
)

SCHEMES=(
    Reconcilation
    Sx
)

if [ -z "$BRANCH" ]; then
    echo BRANCH is missing from the environment variables >&2
    exit 1
fi

if [ -z "$GITHUB_TOKEN" ]; then
    echo GITHUB_TOKEN is missing from the environment variables >&2
    exit 1
fi

BUILD_DIRECTORY=$(mktemp -d)
trap "rm -r $BUILD_DIRECTORY" EXIT

function test {
    set -e

    local DERIVED_DATA_PATH=$1
    local PLATFORM=$2
    local DESTINATION=$3
    local SCHEME=$4
    local COVERAGE_JSON=$DERIVED_DATA_PATH/coverage.json

    xcodebuild \
        -derivedDataPath "$DERIVED_DATA_PATH" \
        -workspace Sx.xcworkspace \
        -scheme "$SCHEME" \
        -destination "$DESTINATION" \
        test

    local COVERAGE=$(xcrun xccov view \
        --json \
        $DERIVED_DATA_PATH/Logs/Test/*/*/*.xccovreport
    )

    echo $COVERAGE \
        | jq '.targets | map(select(.name == ("'$SCHEME.framework'")))[0]' \
        > $COVERAGE_JSON
}

BUILD_STATUS=0

PLATFORMS_LENGTH=${#PLATFORMS[@]}

for i in $(eval echo "{0..$((PLATFORMS_LENGTH-1))}"); do
    for SCHEME in "${SCHEMES[@]}"; do
        PLATFORM=${PLATFORMS[$i]}
        DESTINATION=${DESTINATIONS[$i]}
        DERIVED_DATA_PATH=$BUILD_DIRECTORY/$PLATFORM/$SCHEME
        LOG_FILE=$DERIVED_DATA_PATH/build.log

        mkdir -p "$DERIVED_DATA_PATH"

        test \
            "$DERIVED_DATA_PATH" \
            "$PLATFORM" \
            "$DESTINATION" \
            "$SCHEME" \
            &> $LOG_FILE \
            & PID=$!

        wait $PID

        if [ $? -ne 0 ]; then
            BUILD_STATUS=1
        fi
    done
done

function archive_build {
    local COMMIT=$(git rev-parse --short HEAD)

    local GITHUB_PAGES=$(mktemp -d)
    trap "rm -rf $GITHUB_PAGES" RETURN

    git clone --quiet -b gh-pages --single-branch \
        https://$GITHUB_TOKEN@github.com/PabloSichert/Sx \
        $GITHUB_PAGES

    cd $GITHUB_PAGES

    git config user.name "Continuous Integration"
    git config user.email "bot@swift.sx"

    mkdir -p builds

    rm -rf builds/$COMMIT
    mkdir "builds/$COMMIT"

    local LINES_EXECUTABLE_GLOBAL=0
    local LINES_COVERED_GLOBAL=0

    local PLATFORMS_LENGTH=${#PLATFORMS[@]}

    for i in $(eval echo "{0..$((PLATFORMS_LENGTH-1))}"); do
        local PLATFORM=${PLATFORMS[$i]}

        for SCHEME in "${SCHEMES[@]}"; do
            SOURCE=$BUILD_DIRECTORY/$PLATFORM/$SCHEME
            DESTINATION=builds/$COMMIT/$PLATFORM/$SCHEME
            mkdir -p "$DESTINATION"
            cp $SOURCE/coverage.json $SOURCE/build.log $DESTINATION
        done

        local BUILD_LABEL=passing
        local BUILD_COLOR=brightgreen

        local COVERAGE_LABEL=n/a
        local COVERAGE_COLOR=red

        if [ $BUILD_STATUS -ne 0 ]; then
            BUILD_LABEL=failing
            BUILD_COLOR=red
        else
            local LINES_EXECUTABLE_PLATFORM=0
            local LINES_COVERED_PLATFORM=0

            for SCHEME in "${SCHEMES[@]}"; do
                LINES_EXECUTABLE_SCHEME=$(cat $BUILD_DIRECTORY/$PLATFORM/$SCHEME/coverage.json | jq '.executableLines' || echo 0)
                LINES_COVERED_SCHEME=$(cat $BUILD_DIRECTORY/$PLATFORM/$SCHEME/coverage.json | jq '.coveredLines' ||Â echo 0)

                LINES_EXECUTABLE_PLATFORM=$((LINES_EXECUTABLE_PLATFORM+LINES_EXECUTABLE_SCHEME))
                LINES_COVERED_PLATFORM=$((LINES_COVERED_PLATFORM+LINES_COVERED_SCHEME))
            done

            if [ $LINES_EXECUTABLE_PLATFORM -ne 0 ]; then
                LINES_EXECUTABLE_GLOBAL=$((LINES_EXECUTABLE_GLOBAL+LINES_EXECUTABLE_PLATFORM))
                LINES_COVERED_GLOBAL=$((LINES_COVERED_GLOBAL+LINES_COVERED_PLATFORM))

                COVERAGE_LABEL=$(bc <<< "$LINES_COVERED_PLATFORM*100/$LINES_EXECUTABLE_PLATFORM")%25
                COVERAGE_COLOR=brightgreen
            fi
        fi

        curl -s -w "\n" https://img.shields.io/badge/build-$BUILD_LABEL-$BUILD_COLOR.svg > builds/$COMMIT/$PLATFORM/badge-build.svg
        curl -s -w "\n" https://img.shields.io/badge/build-$PLATFORM-$BUILD_COLOR.svg > builds/$COMMIT/badge-$PLATFORM.svg
        curl -s -w "\n" https://img.shields.io/badge/coverage-$COVERAGE_LABEL-$COVERAGE_COLOR.svg > builds/$COMMIT/$PLATFORM/badge-coverage.svg
    done

    local COVERAGE_GLOBAL_LABEL=n/a
    local COVERAGE_GLOBAL_COLOR=red

    if [ $LINES_EXECUTABLE_GLOBAL -ne 0 ]; then
        COVERAGE_GLOBAL_LABEL=$(bc <<< "$LINES_COVERED_GLOBAL*100/$LINES_EXECUTABLE_GLOBAL")%25
        COVERAGE_GLOBAL_COLOR=brightgreen
    fi

    curl -s -w "\n" https://img.shields.io/badge/coverage-$COVERAGE_LABEL-$COVERAGE_COLOR.svg > builds/$COMMIT/badge-coverage.svg

    rm -rf builds/$BRANCH
    cp -r builds/$COMMIT builds/$BRANCH

    git add builds/$COMMIT builds/$BRANCH
    git commit --quiet -m "Build artifacts from commit $COMMIT on branch $BRANCH"
    git push --quiet

    cd - &> /dev/null

    echo "Build logs for commit $COMMIT on branch $BRANCH:"
    echo https://github.com/PabloSichert/Sx/tree/gh-pages/builds/$COMMIT
}

archive_build

exit $BUILD_STATUS
