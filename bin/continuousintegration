SCHEMES=(
    Reconcilation
    Nift
    AppKitX
)

if [ -z "$GITHUB_TOKEN" ]; then
    echo GITHUB_TOKEN is missing from the environment variables >&2
    exit 1
fi

BUILD_DIRECTORY=$(mktemp -d)
trap "rm -r $BUILD_DIRECTORY" EXIT

function test {
    local SCHEME=$1
    local DERIVED_DATA_PATH=$2
    local COVERAGE_JSON=$DERIVED_DATA_PATH/coverage.json

    xcodebuild \
        -derivedDataPath $DERIVED_DATA_PATH \
        -workspace Nift.xcworkspace \
        -scheme $SCHEME \
        test \

    local COVERAGE=$(xcrun xccov view \
        --json \
        $DERIVED_DATA_PATH/Logs/Test/*/*/*.xccovreport
    )

    echo $COVERAGE \
        | jq '.targets | map(select(.name == ("'$SCHEME.framework'")))[0]' \
        > $COVERAGE_JSON
}

for SCHEME in "${SCHEMES[@]}"; do
    DERIVED_DATA_PATH=$BUILD_DIRECTORY/$SCHEME
    LOG_FILE=$DERIVED_DATA_PATH/build.log

    mkdir $DERIVED_DATA_PATH

    test \
        $SCHEME \
        $DERIVED_DATA_PATH \
        &> $LOG_FILE \
        &
done

wait

function archive_build {
    local EXECUTABLE_LINES_NIFT=$(cat $BUILD_DIRECTORY/Nift/coverage.json | jq '.executableLines')
    local COVERED_LINES_NIFT=$(cat $BUILD_DIRECTORY/Nift/coverage.json | jq '.coveredLines')

    local EXECUTABLE_LINES_RECONCILATION=$(cat $BUILD_DIRECTORY/Reconcilation/coverage.json | jq '.executableLines')
    local COVERED_LINES_RECONCILATION=$(cat $BUILD_DIRECTORY/Reconcilation/coverage.json | jq '.coveredLines')

    local EXECUTABLE_LINES=$(($EXECUTABLE_LINES_NIFT + $EXECUTABLE_LINES_RECONCILATION))
    local COVERED_LINES=$(($COVERED_LINES_NIFT + $COVERED_LINES_RECONCILATION))

    local LINE_COVERAGE=$(bc <<< "$COVERED_LINES*100/$EXECUTABLE_LINES")

    local BRANCH=$(git rev-parse --abbrev-ref HEAD)
    local COMMIT=$(git rev-parse --short HEAD)

    local GITHUB_PAGES=$(mktemp -d)
    trap "rm -rf $GITHUB_PAGES" RETURN

    git clone --quiet -b gh-pages --single-branch \
        https://$GITHUB_TOKEN@github.com/PabloSichert/Nift \
        $GITHUB_PAGES

    cd $GITHUB_PAGES

    git config user.name "Continuous Integration"
    git config user.email ""

    mkdir -p builds

    rm -rf builds/$BRANCH
    mkdir builds/$BRANCH

    for SCHEME in "${SCHEMES[@]}"; do
        SOURCE=$BUILD_DIRECTORY/$SCHEME
        DESTINATION=builds/$BRANCH/$SCHEME
        mkdir $DESTINATION
        cp $SOURCE/coverage.json $SOURCE/build.log $DESTINATION
    done

    curl -s -w "\n" https://img.shields.io/badge/coverage-$LINE_COVERAGE%25-brightgreen.svg > builds/$BRANCH/badge-coverage.svg

    git add builds/$BRANCH
    git commit --quiet -m "Build artifacts from commit $COMMIT on branch $BRANCH"
    git push --quiet

    cd - &> /dev/null
}

archive_build
