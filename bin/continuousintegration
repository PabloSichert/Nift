PLATFORMS=(
    macOS
    iOS
    watchOS
    tvOS
)

DESTINATIONS=(
    "platform=macOS"
    "platform=iOS Simulator,name=iPhone XR"
    "platform=watchOS Simulator,name=Apple Watch Series 4 - 40mm"
    "platform=tvOS Simulator,name=Apple TV"
)

SCHEMES=(
    Reconcilation
    Sx
)

if [ -z "$BRANCH" ]; then
    echo BRANCH is missing from the environment variables >&2
    exit 1
fi

if [ -z "$GITHUB_TOKEN" ]; then
    echo GITHUB_TOKEN is missing from the environment variables >&2
    exit 1
fi

BUILD_DIRECTORY=$(mktemp -d)
trap "rm -r $BUILD_DIRECTORY" EXIT

function test {
    set -e

    local DERIVED_DATA_PATH=$1
    local PLATFORM=$2
    local DESTINATION=$3
    local SCHEME=$4
    local COVERAGE_JSON=$DERIVED_DATA_PATH/coverage.json

    if [ "$PLATFORM" = "watchOS" ]; then
        return
    fi

    xcodebuild \
        -derivedDataPath "$DERIVED_DATA_PATH" \
        -workspace Sx.xcworkspace \
        -scheme "$SCHEME" \
        -destination "$DESTINATION" \
        test

    local COVERAGE=$(xcrun xccov view \
        --json \
        $DERIVED_DATA_PATH/Logs/Test/*/*/*.xccovreport
    )

    echo $COVERAGE \
        | jq '.targets | map(select(.name == ("'$SCHEME.framework'")))[0]' \
        > $COVERAGE_JSON
}

PIDS=()

PLATFORMS_LENGTH=${#PLATFORMS[@]}

for i in $(eval echo "{0..$((PLATFORMS_LENGTH-1))}"); do
    for SCHEME in "${SCHEMES[@]}"; do
        PLATFORM=${PLATFORMS[$i]}
        DESTINATION=${DESTINATIONS[$i]}
        DERIVED_DATA_PATH=$BUILD_DIRECTORY/$PLATFORM/$SCHEME
        LOG_FILE=$DERIVED_DATA_PATH/build.log

        mkdir -p "$DERIVED_DATA_PATH"

        test \
            "$DERIVED_DATA_PATH" \
            "$PLATFORM" \
            "$DESTINATION" \
            "$SCHEME" \
            &> $LOG_FILE \
            & PIDS+=($!)
    done
done

function collect_statuses {
    for PID in "${PIDS[@]}"; do
        wait $PID

        if [ $? -ne 0 ]; then
            return 1
        fi
    done
}

collect_statuses

BUILD_STATUS=$?

# Wait for potential builds that occurred after a failing one
wait

# https://stackoverflow.com/questions/1527049/join-elements-of-an-array/17841619#comment37571340_17841619
function join {
    perl -e '$s = shift @ARGV; print join($s, @ARGV);' "$@"
}

function create_platforms_badge {
    local COLOR=brightgreen
    local URL=https://img.shields.io/badge/platforms-

    URL=$URL$( join " | " "$@" )

    URL=$URL-$COLOR

    URL=$URL.svg

    curl -s -w "\n" "$URL"
}

function archive_build {
    local COMMIT=$(git rev-parse --short HEAD)

    local GITHUB_PAGES=$(mktemp -d)
    trap "rm -rf $GITHUB_PAGES" RETURN

    git clone --quiet -b gh-pages --single-branch \
        https://$GITHUB_TOKEN@github.com/PabloSichert/Sx \
        $GITHUB_PAGES

    cd $GITHUB_PAGES

    git config user.name "Continuous Integration"
    git config user.email "bot@swift.sx"

    mkdir -p builds

    rm -rf builds/$COMMIT
    mkdir "builds/$COMMIT"

    local PLATFORMS_LENGTH=${#PLATFORMS[@]}

    for i in $(eval echo "{0..$((PLATFORMS_LENGTH-1))}"); do
        local PLATFORM=${PLATFORMS[$i]}

        if [ "$PLATFORM" = "watchOS" ]; then
            continue
        fi

        for SCHEME in "${SCHEMES[@]}"; do
            SOURCE=$BUILD_DIRECTORY/$PLATFORM/$SCHEME
            DESTINATION=builds/$COMMIT/$PLATFORM/$SCHEME
            mkdir -p "$DESTINATION"
            cp $SOURCE/coverage.json $SOURCE/build.log $DESTINATION
        done

        local BUILD_LABEL=passing
        local BUILD_COLOR=brightgreen

        local COVERAGE_LABEL=n/a
        local COVERAGE_COLOR=red

        if [ $BUILD_STATUS -ne 0 ]; then
            BUILD_LABEL=failing
            BUILD_COLOR=red
        else
            local EXECUTABLE_LINES=0
            local COVERED_LINES=0

            for SCHEME in "${SCHEMES[@]}"; do
                SCHEME_EXECUTABLE_LINES=$(cat $BUILD_DIRECTORY/$PLATFORM/$SCHEME/coverage.json | jq '.executableLines' || echo 0)
                SCHEME_COVERED_LINES=$(cat $BUILD_DIRECTORY/$PLATFORM/$SCHEME/coverage.json | jq '.coveredLines' ||Â echo 0)

                EXECUTABLE_LINES=$((EXECUTABLE_LINES+SCHEME_EXECUTABLE_LINES))
                COVERED_LINES=$((COVERED_LINES+SCHEME_COVERED_LINES))
            done

            if [ $EXECUTABLE_LINES -ne 0 ]; then
                COVERAGE_LABEL=$(bc <<< "$COVERED_LINES*100/$EXECUTABLE_LINES")%25
                COVERAGE_COLOR=brightgreen
            fi
        fi

        curl -s -w "\n" https://img.shields.io/badge/build-$BUILD_LABEL-$BUILD_COLOR.svg > builds/$COMMIT/$PLATFORM/badge-build.svg

        curl -s -w "\n" https://img.shields.io/badge/coverage-$COVERAGE_LABEL-$COVERAGE_COLOR.svg > builds/$COMMIT/$PLATFORM/badge-coverage.svg
    done

    local IFS=" "
    create_platforms_badge ${PLATFORMS[*]} > builds/$COMMIT/badge-platforms.svg

    rm -rf builds/$BRANCH
    cp -r builds/$COMMIT builds/$BRANCH

    git add builds/$COMMIT builds/$BRANCH
    git commit --quiet -m "Build artifacts from commit $COMMIT on branch $BRANCH"
    git push --quiet

    cd - &> /dev/null

    echo "Build logs for commit $COMMIT on branch $BRANCH:"
    echo https://github.com/PabloSichert/Sx/tree/gh-pages/builds/$COMMIT
}

archive_build

exit $BUILD_STATUS
