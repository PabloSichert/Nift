SCHEMES=(
    Reconcilation
    Nift
)

if [ -z "$BRANCH" ]; then
    echo BRANCH is missing from the environment variables >&2
    exit 1
fi

if [ -z "$GITHUB_TOKEN" ]; then
    echo GITHUB_TOKEN is missing from the environment variables >&2
    exit 1
fi

BUILD_DIRECTORY=$(mktemp -d)
trap "rm -r $BUILD_DIRECTORY" EXIT

function test {
    local SCHEME=$1
    local DERIVED_DATA_PATH=$2
    local COVERAGE_JSON=$DERIVED_DATA_PATH/coverage.json

    xcodebuild \
        -derivedDataPath $DERIVED_DATA_PATH \
        -workspace Nift.xcworkspace \
        -scheme $SCHEME \
        test

    local COVERAGE=$(xcrun xccov view \
        --json \
        $DERIVED_DATA_PATH/Logs/Test/*/*/*.xccovreport
    )

    echo $COVERAGE \
        | jq '.targets | map(select(.name == ("'$SCHEME.framework'")))[0]' \
        > $COVERAGE_JSON
}

PIDS=()

for SCHEME in "${SCHEMES[@]}"; do
    DERIVED_DATA_PATH=$BUILD_DIRECTORY/$SCHEME
    LOG_FILE=$DERIVED_DATA_PATH/build.log

    mkdir $DERIVED_DATA_PATH

    test \
        $SCHEME \
        $DERIVED_DATA_PATH \
        &> $LOG_FILE \
        & PIDS+=($!)
done

function collect_statuses {
    for PID in "${PIDS[@]}"; do
        wait $PID

        if [ $? -ne 0 ]; then
            return 1
        fi
    done
}

collect_statuses

BUILD_STATUS=$?

# Wait for potential builds that occurred after a failing one
wait

function archive_build {
    local COMMIT=$(git rev-parse --short HEAD)

    local GITHUB_PAGES=$(mktemp -d)
    trap "rm -rf $GITHUB_PAGES" RETURN

    git clone --quiet -b gh-pages --single-branch \
        https://$GITHUB_TOKEN@github.com/PabloSichert/Nift \
        $GITHUB_PAGES

    cd $GITHUB_PAGES

    git config user.name "Continuous Integration"
    git config user.email ""

    mkdir -p builds

    rm -rf builds/$COMMIT
    mkdir builds/$COMMIT

    for SCHEME in "${SCHEMES[@]}"; do
        SOURCE=$BUILD_DIRECTORY/$SCHEME
        DESTINATION=builds/$COMMIT/$SCHEME
        mkdir $DESTINATION
        cp $SOURCE/coverage.json $SOURCE/build.log $DESTINATION
    done

    local BUILD_LABEL=passing
    local BUILD_COLOR=brightgreen

    local COVERAGE_LABEL=n/a
    local COVERAGE_COLOR=red

    if [ $BUILD_STATUS -ne 0 ]; then
        BUILD_LABEL=failing
        BUILD_COLOR=red
    else
        local EXECUTABLE_LINES=0
        local COVERED_LINES=0

        for SCHEME in "${SCHEMES[@]}"; do
            SCHEME_EXECUTABLE_LINES=$(cat $BUILD_DIRECTORY/$SCHEME/coverage.json | jq '.executableLines' || echo 0)
            SCHEME_COVERED_LINES=$(cat $BUILD_DIRECTORY/$SCHEME/coverage.json | jq '.coveredLines' ||Â echo 0)

            EXECUTABLE_LINES=$(($EXECUTABLE_LINES+$SCHEME_EXECUTABLE_LINES))
            COVERED_LINES=$(($COVERED_LINES+$SCHEME_COVERED_LINES))
        done

        if [ $EXECUTABLE_LINES -ne 0 ]; then
            COVERAGE_LABEL=$(bc <<< "$COVERED_LINES*100/$EXECUTABLE_LINES")%25
            COVERAGE_COLOR=brightgreen
        fi
    fi

    curl -s -w "\n" https://img.shields.io/badge/build-$BUILD_LABEL-$BUILD_COLOR.svg > builds/$COMMIT/badge-build.svg

    curl -s -w "\n" https://img.shields.io/badge/coverage-$COVERAGE_LABEL-$COVERAGE_COLOR.svg > builds/$COMMIT/badge-coverage.svg

    rm -rf builds/$BRANCH
    cp -r builds/$COMMIT builds/$BRANCH

    git add builds/$COMMIT builds/$BRANCH
    git commit --quiet -m "Build artifacts from commit $COMMIT on branch $BRANCH"
    git push --quiet

    cd - &> /dev/null

    echo "Build logs for commit $COMMIT on branch $BRANCH:"
    echo https://github.com/PabloSichert/Nift/tree/gh-pages/builds/$COMMIT
}

archive_build

exit $BUILD_STATUS
